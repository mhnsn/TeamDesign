// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2018 23:18:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TeamDesign
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TeamDesign_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg en1;
reg en2;
reg ld1;
reg ld2;
// wires                                               
wire g1;
wire g2;
wire r1;
wire r2;
wire y1;
wire y2;

// assign statements (if any)                          
TeamDesign i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.en1(en1),
	.en2(en2),
	.g1(g1),
	.g2(g2),
	.ld1(ld1),
	.ld2(ld2),
	.r1(r1),
	.r2(r2),
	.y1(y1),
	.y2(y2)
);
initial 
begin 
#640000 $finish;
end 

// ck
always
begin
	ck = 1'b0;
	ck = #5000 1'b1;
	#5000;
end 

// en1
initial
begin
	en1 = 1'b0;
end 

// en2
initial
begin
	en2 = 1'b0;
end 

// ld1
initial
begin
	ld1 = 1'b0;
end 

// ld2
initial
begin
	ld2 = 1'b0;
end 
endmodule

